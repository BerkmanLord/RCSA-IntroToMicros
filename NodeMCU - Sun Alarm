/*
 * Sun Alarm - RCS Academy - Lord
 * Turns on an LED and alerts the user when it's dark!
 * Turns off the LED and alerts the user when it's morning!
 * Feel free to experiment by changing the notes, messages & darkness levels!
 * Please add monitor_speed = 115200 to your platform.ini file!
 */

// Bonus Code!
#include <Adafruit_I2CDevice.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char sun_icon [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x0c, 0x00, 0x07, 0xe0, 0x00, 0x10, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
	0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x03, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x03, 0xc0, 0x07, 0xc0, 0x00, 
	0x00, 0x01, 0xc0, 0x3f, 0xfc, 0x03, 0xc0, 0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0x01, 0x80, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x18, 0x7f, 0xff, 0xff, 0xfe, 0x18, 0x00, 
	0x00, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0x00, 0x07, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xe0, 
	0x0f, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xf0, 0x03, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 
	0x00, 0x78, 0x7f, 0xff, 0xff, 0xfe, 0x1e, 0x00, 0x00, 0x10, 0x7f, 0xff, 0xff, 0xfe, 0x08, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x81, 0xff, 0xff, 0x81, 0x80, 0x00, 0x00, 0x01, 0xc0, 0x7f, 0xff, 0x03, 0x80, 0x00, 
	0x00, 0x01, 0xe0, 0x1f, 0xf8, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x80, 0x0f, 0xc0, 0x00, 
	0x00, 0x03, 0xf8, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0c, 0x00, 0x07, 0xe0, 0x00, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char moon_icon [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x83, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x0f, 0x00, 0x00, 
	0x06, 0x01, 0xff, 0xff, 0xfc, 0x02, 0x00, 0x00, 0x0f, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x07, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x07, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x07, 0x80, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x07, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xc0, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x01, 0x00, 
	0x00, 0x00, 0x1c, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x3f, 0xc1, 0xf0, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xf7, 0xfc, 0x7f, 0xfc, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0xfe, 0x3f, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x1f, 0xff, 0x00, 0x00, 
	0x01, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xf0, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0x83, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x80, 
	0x7f, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfe, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf0, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xc0, 
	0x7f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfe, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xfc, 0x00, 0x07, 0xbf, 0xff, 0xff, 0x03, 0xff, 0xf0, 0x00, 
	0x00, 0x1f, 0xff, 0xfe, 0x07, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xef, 0xfc, 0x07, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#include <Arduino.h>

int buzzer = D3; // The pin our buzzer is connected to.
int ledPin = D4; // The pin our LED is connected to. D4 is the LED_BUILTIN! (The top LED)
int lightSensor = A0; // The pin our Light Sensor is connected to.

int lightSensorValue = 550; // Our initial darkness value. Must be between darknessTreshold & sunlightTreshold values.

int darknessTreshold = 600; // Darkness level to decide when it's evening! Increase it to alert when it's darker!
bool darknessTriggered = false;
int eveningMelody[] = {     262,   131 }; // Notes to play when it's dark!
int eveningDurations[] = {   4,     8  }; // How long each note is played.

int sunlightTreshold = 500; // Darkness level to decide when it's morning! Decrease it to alert when it's brighter!
bool sunlightTriggered = false;
int morningMelody[] = {     131,   262 }; // Notes to play when it's morning!
int morningDurations[] = {   4,     8  }; // How long each note is played.

void setup() {

  // More Bonus Code!
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed if OLED is not Detected, loop forever
  }
  

  // Initialize serial communication at the Baud 115200
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);


}

void loop() {


  lightSensorValue = analogRead(lightSensor); // We are reading the lightSensor and storing the darkness value in lightSensorValue, replacing the initial value.
  Serial.print("Darkness = "); // Printing the word inside
  Serial.println(lightSensorValue); // Printing the darkness value and making a new line.


  //Darkness Trigger
  if(lightSensorValue > darknessTreshold && darknessTriggered == false){ // If the darkness value is larger than our darkness treshold;
    digitalWrite(ledPin, LOW); // We turn on our LED, as it's dark!

    for (int thisNote = 0; thisNote < 2; thisNote++) { // And then we start playing our tune!
        int noteDuration = 1000 / eveningDurations[thisNote];
        tone(buzzer, eveningMelody[thisNote], noteDuration);
        int pauseBetweenNotes = noteDuration * 1.30;
        delay(pauseBetweenNotes);
        noTone(buzzer);
    }

    darknessTriggered = true;
    sunlightTriggered = false;
    Serial.println("Good Night!"); // Then we wish everybody goodnight on our Serial Monitor.

        // Bonus Code!
         
          display.clearDisplay();
          display.setTextColor(WHITE);
            display.drawBitmap(0, 0, moon_icon, 64, 64, 1);
          display.display();
        

  } else if(lightSensorValue < sunlightTreshold && sunlightTriggered == false) { // If the darkness value is smaller than our sunlight treshold;
    digitalWrite(ledPin, HIGH); // We turn off our LED, as it's bright outside!

    for (int thisNote = 0; thisNote < 2; thisNote++) { // And then we start playing our tune!
        int noteDuration = 1000 / morningDurations[thisNote];
        tone(buzzer, morningMelody[thisNote], noteDuration);
        int pauseBetweenNotes = noteDuration * 1.30;
        delay(pauseBetweenNotes);
        noTone(buzzer);
    }

    darknessTriggered = false;
    sunlightTriggered = true;
    Serial.println("Morning Sunshine!"); // Then we wish everybody good morning on our Serial Monitor.

        // Bonus Code!
        
          display.clearDisplay();
          display.setTextColor(WHITE);
            display.drawBitmap(0, 0, sun_icon, 64, 64, 1);
          display.display();
        

  }

  delay(1000); // We wait 1 second!
}
